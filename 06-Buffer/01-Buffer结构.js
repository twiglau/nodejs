/**
 * 模块结构 和 对象结构
 */

/**
 * 1. 模块结构
 *  Buffer 是一个典型的 JavaScript 与 C++ 结合的模块, 它将性能相关部分用 C++ 实现,
 * 将非性能相关的部分用JavaScript实现
 * 
 * JavaScript核心模块   -> Buffer/SlowBuffer
 * C++ 内建模块         -> node_buffer
 * 
 * Buffer所占用的内存不是通过V8分配的, 属于堆外内存.
 * 由于V8垃圾回收性能的影响, 将常用的操作对象用更高效和专有的内存分配回收策略来管理是个不错的思路.
 * 由于Buffer太过常见,Node在进程启动时就已经加载了它, 并将其放在全局对象(global)上. 所以在使用
 * Buffer时, 无须通过 require() 即可直接使用.
 */

/**
 * 1.1 Buffer 内存分配
 * Buffer对象的内存分配不是在V8的堆内存中, 而是在Node的C++层面实现内存的申请的. 因为处理大量的字节
 * 数据不能采用需要一点内存就像操作系统申请一点内存的方式, 这可能造成大量的内存申请的系统调用, 对操作
 * 系统有一定压力. 为此Node在内存的使用上应用的是在C++层面申请内存, 在JavaScript中分配内存的策略.
 * 
 * 为了高效地使用申请来的内存, Node采用了 slab 分配机制. slab 是一种动态内存管理机制, 最早诞生于
 * SunOS 操作系统(Solaris) 中, 目前在一些 *nix 操作系统中有广泛的应用,如 FreeBSD 和 Linux.
 * 
 * slab 就是一块申请好的固定大小的内存区域. slab 具有如下 3 种状态.
 * > full: 完全分配状态.
 * > partial: 部分分配状态.
 * > empty: 没有被分配状态.
 * 
 * --> Node 以 8KB 为界限来区分 Buffer 是大对象还是小对象;
 * 这个8KB的值也就是每个Slab的大小值,在JavaScript层面, 以它作为单位单元进行内存的分配.
 * 
 * 
 * i. Buffer的分配过程中主要使用一个局部变量 pool 作为中间处理对象, 处于分配状态的 slab 单元都指向它.
 */