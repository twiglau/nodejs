/**
 * 一般而言, 应用中存在一些全局性的对象是正常的, 而且在正常的使用中, 变量都会自欧东释放回收. 但是
 * 也会存在一些我们认为会回收但是却没有被回收的对象, 这会导致内存占用无限增长. 一旦增长达到 V8 的
 * 内存限制, 将会得到内存溢出错误, 进而导致进程退出
 */


/**
 * 1. 查看内存使用情况
 * 前面我们提到了 process.memoryUsage() 可以查看内存使用情况. 除此之外, os 模块中的 totalmem()
 * 和 freemem() 方法也可以查看内存使用情况.
 * 
 * 调用 process.memoryUsage() 可以看到 Node 进程的内存占用情况, 如下: 
 * > node 
 * > process.memoryUsage()
 * 
 * rss 是 resident set size 的缩写, 即进程的常驻内存部分. 进程的内存总共有几部分, 一部分是 rss, 其余
 * 部分在交换区 (swap) 或者 文件系统 (filesystem) 中.
 * 
 * 除了 rss 外, heapTotal 和 heapUsed 对应的是 V8 的堆内存信息. heapTotal 是堆中总共申请的内存量, 
 * heapUsed 表示目前堆中使用中的内存量. 这3个值的单位都是字节. 
 * 
 * 为了更好地查看效果, 我们格式化一下输出结果: 
 * 
 */