/**
 * 对于一个Web应用而言, 仅仅只是上面这样的响应远远达不到业务的需求. 在具体的业务中, 可能
 * 有如下这些需求
 * > 请求方法的判断.
 * > URL的路径解析
 * > URL中查询字符串解析
 * > Cookie的解析
 * > Basic认证.
 * > 表单数据的解析.
 * > 任意格式文件的上传处理
 * 
 * 除此之外,可能还有 Session(会话)的需求. 尽管Node提供的底层API相对来说比较简单, 但要完成业务需求,还
 * 需要大量的工作, 仅仅一个request事件似乎无法满足这些需求. 但是要实现这些需求并非难事,一切的一切,都
 * 从如下这个函数展开: 
 * 
 * function(req,res) {
 *     res.writeHead(200, {'Content-Type': 'text/plain' });
 *     res.end();
 * }
 * 
 * 在第4章中, 我们应用可能无限地复杂, 但是只要最终结果返回一个上面的函数作为参数,传递给 createServer()
 * 方法作为 request 事件的侦听器就可以了. 
 * 
 * 如下代码; 
 * var app = connect();
 * // var app = express();
 * // TODO
 * http.createServer(app).listen(1337);
 * 
 * 它的原理即使如此, 我们在具体业务开始前, 需要为业务预处理一些细节, 这些细节将会挂载在 req 或 res 对象上,
 * 供业务代码使用
 */